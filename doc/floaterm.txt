*floaterm.txt*	Floating terminal manager for Neovim

==============================================================================
CONTENTS					*floaterm-contents*

    1. Introduction ..................... |floaterm-introduction|
    2. Requirements ..................... |floaterm-requirements|
    3. Installation ..................... |floaterm-installation|
    4. Configuration .................... |floaterm-configuration|
    5. Usage ............................ |floaterm-usage|
    6. API Reference .................... |floaterm-api|
    7. Picker ........................... |floaterm-picker|
    8. Examples ......................... |floaterm-examples|
    9. Troubleshooting .................. |floaterm-troubleshooting|

==============================================================================
1. INTRODUCTION					*floaterm-introduction*

floaterm.nvim is a lightweight plugin for Neovim that provides floating
terminal windows. It allows you to create, manage, and navigate between
multiple terminal instances with ease.

Key features:
- Multiple floating terminal instances with unique IDs
- Terminal picker with fzf-lua, snack, or builtin integration
- Configurable window dimensions and appearance
- Easy navigation between terminals
- Dynamic resizing capabilities
- Support for running arbitrary commands
- Auto-start terminals on plugin load
- Named terminal instances for easy reference

==============================================================================
2. REQUIREMENTS					*floaterm-requirements*

- Neovim 0.5 or later
- Optional: fzf-lua for enhanced picker functionality
- Optional: snack.nvim as alternative picker

==============================================================================
3. INSTALLATION					*floaterm-installation*

Using lazy.nvim: >
    {
      'your-username/floaterm.nvim',
      dependencies = {
        'ibhagwan/fzf-lua', -- Optional: for enhanced picker
        -- or 'folke/snack.nvim', -- Alternative picker
      },
      config = function()
        require('floaterm').setup()
      end
    }
<

Using packer.nvim: >
    use {
      'your-username/floaterm.nvim',
      requires = { 'ibhagwan/fzf-lua' }, -- Optional
      config = function()
        require('floaterm').setup()
      end
    }
<

==============================================================================
4. CONFIGURATION				*floaterm-configuration*

The plugin can be configured by passing options to the setup function.

Default configuration: >
    require('floaterm').setup({
      picker = "fzf-lua",  -- Terminal picker type
      opts = {
        width = 0.9,        -- Terminal width (0.1-0.99)
        height = 0.9,       -- Terminal height (0.1-0.99)
        style = "minimal",  -- Window style
        border = "rounded", -- Border style
        autoclose = false,  -- Auto-close on job exit
        cmd = nil,          -- Default command
        pick = true,        -- Show in picker by default
      },
      start_cmds = {},      -- Auto-start terminals
    })
<

Configuration options:

picker					*floaterm-config-picker*
    Type: string
    Default: "fzf-lua"
    Picker type to use for terminal selection:
    - "fzf-lua": Use fzf-lua picker with preview
    - "snack": Use snack.nvim picker
    - "builtin": Use vim.ui.select

opts					*floaterm-config-opts*
    Type: table
    Default terminal options applied to all new terminals.

width					*floaterm-config-width*
    Type: number (0.1 to 0.99)
    Default: 0.9
    Terminal width as a fraction of the screen width.

height					*floaterm-config-height*
    Type: number (0.1 to 0.99)
    Default: 0.9
    Terminal height as a fraction of the screen height.

style					*floaterm-config-style*
    Type: string
    Default: "minimal"
    Window style passed to |nvim_open_win()|.

border					*floaterm-config-border*
    Type: string or table
    Default: "rounded"
    Border style. Can be:
    - "none": No border
    - "single": Single line border
    - "double": Double line border
    - "rounded": Rounded corners
    - "solid": Solid border
    - "shadow": Border with shadow
    - Array of 8 characters for custom border

autoclose				*floaterm-config-autoclose*
    Type: boolean
    Default: false
    Whether to automatically close the terminal when the job exits.

cmd					*floaterm-config-cmd*
    Type: string or nil
    Default: nil
    Default command to run in new terminals. Uses vim.o.shell if nil.

pick					*floaterm-config-pick*
    Type: boolean
    Default: true
    Whether terminals appear in the picker by default.

start_cmds				*floaterm-config-start-cmds*
    Type: table
    Default: {}
    Array of terminal configurations to create automatically on startup.
    Each entry should have:
    - id: string - Terminal ID
    - opts: table - Terminal options

==============================================================================
5. USAGE					*floaterm-usage*

Basic usage involves calling the setup function and using the provided API
functions to manage terminals.

Example keymaps: >
    local floaterm = require('floaterm')
    
    vim.keymap.set({ 'n', 't' }, '<leader>tf', function()
      floaterm.new()
    end)
    vim.keymap.set({ 'n', 't' }, '<leader>tt', function()
      floaterm.toggle()
    end)
    vim.keymap.set({ 'n', 't' }, '<leader>tl', floaterm.pick)
    vim.keymap.set({ 'n', 't' }, '<leader>t=', function()
      floaterm.resize(0.05)
    end)
    vim.keymap.set({ 'n', 't' }, '<leader>t-', function()
      floaterm.resize(-0.05)
    end)
<

==============================================================================
6. API REFERENCE				*floaterm-api*

floaterm.setup({opts})				*floaterm.setup()*
    Initialize the plugin with configuration options.
    
    Parameters:
      {opts} (table, optional): Configuration options

floaterm.new({id}, {opts})			*floaterm.new()*
    Create and open a new floating terminal.
    
    Parameters:
      {id} (string, optional): Custom ID for the terminal
      {opts} (table, optional): Terminal-specific options

floaterm.open({id})				*floaterm.open()*
    Open an existing terminal by ID.
    
    Parameters:
      {id} (string, optional): Terminal ID (uses current if nil)

floaterm.toggle({id})				*floaterm.toggle()*
    Toggle the visibility of a terminal.
    
    Parameters:
      {id} (string, optional): Terminal ID (uses current if nil)

floaterm.close({id})				*floaterm.close()*
    Close a terminal and remove it from the terminal list.
    
    Parameters:
      {id} (string, optional): Terminal ID (uses current if nil)

floaterm.pick()					*floaterm.pick()*
    Open a picker to select from available terminals.

floaterm.resize({delta})			*floaterm.resize()*
    Resize the current terminal by the specified delta.
    
    Parameters:
      {delta} (number): Resize delta (positive or negative)

floaterm.count()				*floaterm.count()*
    Get the number of active pickable terminals.
    
    Returns:
      Number of active terminals that appear in picker

floaterm.find({id})				*floaterm.find()*
    Find a terminal by ID or get current active terminal.
    
    Parameters:
      {id} (string, optional): Terminal ID
    
    Returns:
      Terminal object or nil if not found

==============================================================================
7. PICKER					*floaterm-picker*

The picker provides a way to select from multiple terminal instances.

fzf-lua Picker				*floaterm-picker-fzflua*
    When fzf-lua is available, the picker offers:
    - Live preview of terminal content
    - Fuzzy searching by terminal ID and title
    - Enhanced visual presentation
    - Keyboard shortcuts (Ctrl-N for navigation)

Snack Picker				*floaterm-picker-snack*
    When snack.nvim is available, the picker provides:
    - Integration with Snack's picker system
    - Consistent UI with other Snack components

Builtin Picker				*floaterm-picker-builtin*
    Fallback picker using vim.ui.select:
    - Simple list selection interface
    - Compatible with any vim.ui.select implementation
    - No additional dependencies required

==============================================================================
8. EXAMPLES					*floaterm-examples*

Basic terminal operations: >
    local floaterm = require('floaterm')
    
    -- Open default terminal with auto-generated ID
    floaterm.new()
    
    -- Open terminal with custom ID and command
    floaterm.new('python-repl', { cmd = 'python' })
    
    -- Open smaller terminal
    floaterm.new('mini', { width = 0.5, height = 0.5 })
    
    -- Open existing terminal by ID
    floaterm.open('python-repl')
<

Auto-start terminals: >
    require('floaterm').setup({
      start_cmds = {
        {
          id = "main",
          opts = {
            cmd = vim.o.shell,
            pick = true,
          },
        },
        {
          id = "git",
          opts = {
            cmd = "lazygit",
            pick = false,  -- Hidden from picker
            width = 0.8,
            height = 0.8,
          },
        },
      },
    })
<

Specialized terminals: >
    -- Git operations
    vim.keymap.set('n', '<leader>tg', function()
      floaterm.new('lazygit', { cmd = 'lazygit' })
    end)
    
    -- File manager
    vim.keymap.set('n', '<leader>tr', function()
      floaterm.new('ranger', { cmd = 'ranger' })
    end)
    
    -- Python REPL
    vim.keymap.set('n', '<leader>ty', function()
      floaterm.new('python', { 
        cmd = 'python',
        width = 0.6,
        height = 0.8
      })
    end)
    
    -- Background monitoring (hidden from picker)
    floaterm.new('monitor', {
      cmd = 'htop',
      pick = false
    })
<

Custom borders: >
    -- Double border
    floaterm.new('double', { border = "double" })
    
    -- Custom border characters
    floaterm.new('custom', {
      border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" }
    })
<

Terminal object methods: >
    -- Get terminal and use methods directly
    local term = floaterm.find('python-repl')
    if term then
      term:hide()    -- Hide terminal
      term:show()    -- Show terminal
      term:toggle()  -- Toggle visibility
      term:close()   -- Close terminal
    end
<

==============================================================================
9. TROUBLESHOOTING				*floaterm-troubleshooting*

Common issues and solutions:

Terminal not opening~
    - Ensure you called `require('floaterm').setup()`
    - Check if there are any error messages in `:messages`
    - Verify terminal ID exists with `floaterm.find('id')`

Picker not working~
    - If using fzf-lua picker, ensure fzf-lua is installed
    - If using snack picker, ensure snack.nvim is installed
    - Try switching to builtin picker: `picker = "builtin"`
    - Check picker configuration in setup()

Terminal appears but command doesn't run~
    - Verify the command exists and is executable
    - Check terminal buffer with `:term` to test command manually
    - Ensure command is properly quoted if it contains spaces

Keymaps not working in terminal mode~
    - Ensure keymaps are set for both 'n' and 't' modes
    - Use `<C-\><C-n>` to exit terminal mode if needed

Performance issues with many terminals~
    - Consider closing unused terminals with `floaterm.close('id')`
    - Use `floaterm.count()` to monitor active terminals
    - Set `pick = false` for background terminals

Auto-start terminals not working~
    - Check start_cmds configuration in setup()
    - Verify terminal IDs are unique
    - Check `:messages` for any startup errors

Terminal IDs not working as expected~
    - Terminal IDs are auto-generated if not provided
    - Use `floaterm.find('id')` to check if terminal exists
    - IDs are case-sensitive strings

==============================================================================
vim:tw=78:ts=8:ft=help:norl: